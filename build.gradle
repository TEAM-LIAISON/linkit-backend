plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.diffplug.spotless' version '6.21.0'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'jacoco'
}

group = 'liaison'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // p6spy for query logging
    implementation 'p6spy:p6spy:3.9.1'
    implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.2'

    // WebSocket
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.3-1'

    // Json Web Token
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.715'

    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'

    implementation 'org.jsoup:jsoup:1.15.3'

    // cache
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    testImplementation 'io.rest-assured:rest-assured:5.3.1'
    // 테스트 코드에서 MockMvc를 통해 문서를 생성하는 데 필요하다. (MockMvc는 스프링 MVC 동작을 재현할 수 있다.)

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor 'org.projectlombok:lombok'

    // testImplementation 추가 필요
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testImplementation "org.testcontainers:testcontainers:1.17.6"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'io.micrometer:micrometer-registry-prometheus'

//    implementation 'com.github.maricn:logback-slack-appender:1.6.1'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    implementation 'org.mindrot:jbcrypt:0.4'
}

// 코드 포맷터 Spotless 설정
spotless {
    java {
        target '**/*.java'
        targetExclude 'src/main/generated/**', 'bin/generated-sources/**'
        googleJavaFormat().aosp()
        importOrder 'java', 'javax', 'jakarta'
        removeUnusedImports()       // 사용하지 않는 import 제거
        trimTrailingWhitespace()    // 각 라인 끝의 공백 제거
        endWithNewline()            // 파일 끝에 새 줄 추가
    }
}

test {
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        csv {
            enabled true
        }
        html {
            enabled true
        }

        xml.destination file(project.layout.buildDirectory.dir("jacoco/index.xml")) as File
        csv.destination file(project.layout.buildDirectory.dir("jacoco/index.csv")) as File
        html.destination file(project.layout.buildDirectory.dir("jacoco/index.html")) as File
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExt'
    attributes(
            'source-highlighter': 'highlightjs',
            'encoding': 'UTF-8'
    )
}

configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
}

jar {
    enabled = false
}
